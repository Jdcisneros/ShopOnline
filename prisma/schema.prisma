// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  lastName  String?
  email     String     @unique
  phone     String?
  password  String
  isAdmin   Boolean    @default(false)
  createdAt DateTime   @default(now())
  orders    Order[]
  favorites Favorite[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime    @default(now())
  orderItems  OrderItem[]
  favorites   Favorite[]
  featured  Boolean  @default(false)
  onSale      Boolean  @default(false) 
  discountPercentage Float? 
  variants  ProductVariant[]
}

model ProductVariant {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   String
  stock     Int
  orderItems OrderItem[]
}

model Size {
  id    String @id @default(uuid())
  name  String @unique
  variants ProductVariant[]
}

model Color {
  id    String @id @default(uuid())
  name  String @unique
  hex   String
  variants ProductVariant[]
}

model Order {
  id             String      @id @default(cuid())
  user           User?       @relation(fields: [userId], references: [id])
  userId         String?
  address        String?
  paymentMethod  String?
  total          Int
  createdAt      DateTime    @default(now())
  items          OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  price      Int

  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  variantId  String?         // <- clave opcional
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}
